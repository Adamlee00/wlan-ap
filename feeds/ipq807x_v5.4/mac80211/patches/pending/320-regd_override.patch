--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -8136,6 +8136,93 @@ static int parse_reg_rule(struct nlattr
 	return 0;
 }
 
+static void
+nl80211_reg_override_rule_band(struct ieee80211_reg_rule *rule,
+			       struct ieee80211_supported_band *sband,
+			       u8 power_mode)
+{
+	struct ieee80211_freq_range *freq_range = &rule->freq_range;
+	struct ieee80211_channel *chan;
+	int i, n;
+
+	if (!sband)
+		return;
+
+	if (!sband->chan_6g) {
+		chan = sband->channels;
+		n = sband->n_channels;
+	} else if (sband->chan_6g[power_mode]) {
+		chan = sband->chan_6g[power_mode]->channels;
+		n = sband->chan_6g[power_mode]->n_channels;
+	} else {
+		return;
+	}
+
+	for (i = 0; i < n; i++, chan++) {
+		u32 freq_khz = ieee80211_channel_to_khz(chan);
+		if (freq_khz < freq_range->start_freq_khz ||
+		    freq_khz > freq_range->end_freq_khz)
+			continue;
+
+		chan->max_reg_power = rule->power_rule.max_eirp;
+		if (chan->orig_mpwr)
+			chan->max_power = min(chan->max_reg_power, chan->orig_mpwr);
+		else
+			chan->max_power = chan->max_reg_power;
+	}
+}
+
+static void
+nl80211_reg_override_rule(struct ieee80211_reg_rule *rule, u8 power_mode)
+{
+	struct cfg80211_registered_device *rdev;
+	struct wiphy *wiphy;
+	int band;
+
+	rtnl_lock();
+	list_for_each_entry(rdev, &cfg80211_rdev_list, list) {
+		wiphy = &rdev->wiphy;
+		for (band = 0; band < NUM_NL80211_BANDS; band++)
+			nl80211_reg_override_rule_band(rule, wiphy->bands[band],
+						       power_mode);
+	}
+	rtnl_unlock();
+}
+
+static int
+nl80211_set_reg_override(struct sk_buff *skb, struct genl_info *info)
+{
+	struct nlattr *tb[NL80211_REG_RULE_ATTR_MAX + 1];
+	struct nlattr *nl_reg_rule;
+	int rem_reg_rules, r;
+	u8 power_mode = 0;
+
+	if (info->attrs[NL80211_ATTR_6G_REG_POWER_MODE]) {
+		power_mode = nla_get_u8(info->attrs[NL80211_ATTR_6G_REG_POWER_MODE]);
+		if (power_mode >= NL80211_REG_NUM_POWER_MODES)
+			return -EINVAL;
+	}
+
+	nla_for_each_nested(nl_reg_rule, info->attrs[NL80211_ATTR_REG_RULES],
+			    rem_reg_rules) {
+		struct ieee80211_reg_rule rule = {};
+
+		r = nla_parse_nested_deprecated(tb, NL80211_REG_RULE_ATTR_MAX,
+						nl_reg_rule, reg_rule_policy,
+						genl_info_extack(info));
+		if (r)
+			return r;
+
+		r = parse_reg_rule(tb, &rule);
+		if (r)
+			return r;
+
+		nl80211_reg_override_rule(&rule, power_mode);
+	}
+
+	return 0;
+}
+
 static int nl80211_set_reg(struct sk_buff *skb, struct genl_info *info)
 {
 	struct nlattr *tb[NL80211_REG_RULE_ATTR_MAX + 1];
@@ -8146,12 +8233,12 @@ static int nl80211_set_reg(struct sk_buf
 	enum nl80211_dfs_regions dfs_region = NL80211_DFS_UNSET;
 	struct ieee80211_regdomain *rd;
 
-	if (!info->attrs[NL80211_ATTR_REG_ALPHA2])
-		return -EINVAL;
-
 	if (!info->attrs[NL80211_ATTR_REG_RULES])
 		return -EINVAL;
 
+	if (!info->attrs[NL80211_ATTR_REG_ALPHA2])
+		return nl80211_set_reg_override(skb, info);
+
 	alpha2 = nla_data(info->attrs[NL80211_ATTR_REG_ALPHA2]);
 
 	if (info->attrs[NL80211_ATTR_DFS_REGION])
