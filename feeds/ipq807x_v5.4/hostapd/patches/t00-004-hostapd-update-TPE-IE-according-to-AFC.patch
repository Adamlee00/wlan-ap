From: Lorenzo Bianconi <lorenzo@kernel.org>
Date: Wed, 7 Feb 2024 00:08:18 +0100
Subject: [PATCH] hostapd: update TPE IE according to AFC

Update Transmit Power Envelope (TPE) IE according to the reply from AFC
coordinator on UNII-5 or UNII-7 6GHz bands.

Tested-by: Allen Ye <allen.ye@mediatek.com>
---

--- a/src/ap/afc.c
+++ b/src/ap/afc.c
@@ -977,3 +977,40 @@ void hostap_afc_disable_channels(struct
 		chan->flag |= HOSTAPD_CHAN_DISABLED;
 	}
 }
+
+
+int hostap_afc_get_chan_max_eirp_power(struct hostapd_iface *iface, bool psd,
+				       int *power)
+{
+	int i;
+
+	if (!he_reg_is_sp(iface->conf->he_6ghz_reg_pwr_type))
+		return -EINVAL;
+
+	if (!iface->afc.data_valid)
+		return -EINVAL;
+
+	if (psd) {
+		for (i = 0; i < iface->afc.num_freq_range; i++) {
+			struct afc_freq_range_elem *f;
+
+			f = &iface->afc.freq_range[i];
+			if (iface->freq >= f->low_freq &&
+			    iface->freq <= f->high_freq) {
+				*power = 2 * f->max_psd;
+				return 0;
+			}
+		}
+	} else {
+		for (i = 0; i < iface->afc.num_chan_info; i++) {
+			struct afc_chan_info_elem *c;
+
+			c = &iface->afc.chan_info_list[i];
+			if (c->chan == iface->conf->channel) {
+				*power = 2 * c->power;
+				return 0;
+			}
+		}
+	}
+	return -EINVAL;
+}
--- a/src/ap/hostapd.h
+++ b/src/ap/hostapd.h
@@ -666,10 +666,19 @@ struct hostapd_iface {
 
 /* hostapd.c */
 #ifdef CONFIG_AFC
+int hostap_afc_get_chan_max_eirp_power(struct hostapd_iface *iface, bool psd,
+				       int *power);
 int hostapd_afc_handle_request(struct hostapd_iface *iface);
 void hostapd_afc_stop(struct hostapd_iface *iface);
 void hostap_afc_disable_channels(struct hostapd_iface *iface);
 #else
+static inline int
+hostap_afc_get_chan_max_eirp_power(struct hostapd_iface *iface, bool psd,
+				   int *power)
+{
+	return -EINVAL;
+}
+
 static inline int hostapd_afc_handle_request(struct hostapd_iface *iface)
 {
 	return 1;
--- a/src/ap/ieee802_11.c
+++ b/src/ap/ieee802_11.c
@@ -6970,6 +6970,8 @@ u8 * hostapd_eid_txpower_envelope(struct
 	 *  	Unit interpretation = Regulatory client EIRP PSD
 	 */
 	if (is_6ghz_op_class(iconf->op_class)) {
+		int err, max_eirp_psd;
+
 		ap_type = hostapd_get_he_6ghz_reg_pwr_type(iconf);
 
 		tx_pwr_count = DEFAULT_MAX_TX_POWER_COUNT_6G;
@@ -6978,14 +6980,20 @@ u8 * hostapd_eid_txpower_envelope(struct
 		/* Indoor access point must include additional
 		 * TPE for subordinate device
 		 */
+		err = hostap_afc_get_chan_max_eirp_power(iface, true,
+							 &max_eirp_psd);
 		if (ap_type == AP_TYPE_6GHZ_INDOOR_AP) {
 			tx_pwr_cat = REG_SUBORDINATE_CLIENT;
 			psd = mode->psd_values[NL80211_REG_SUBORDINATE_CLIENT_LPI + ap_type];
+			if (err < 0) {
 #ifdef REG_DOM_SUPPORT_TX_POWER
-			tx_pwr = psd * 2;
+				tx_pwr = psd * 2;
 #else
-			tx_pwr = (hostapd_get_6g_tx_power(hapd, ap_type, tx_pwr_cat) * 2);
+				tx_pwr = (hostapd_get_6g_tx_power(hapd, ap_type, tx_pwr_cat) * 2);
 #endif /* REG_DOM_SUPPORT_TX_POWER */
+			} else {
+				tx_pwr = max_eirp_psd;
+			}
 			eid = hostapd_add_tpe_info(eid, tx_pwr_count, tx_pwr_intrpn,
 						   tx_pwr_cat, tx_pwr);
 		}
@@ -6993,11 +7001,15 @@ u8 * hostapd_eid_txpower_envelope(struct
 		/* Default Tx Power envelope for Global Operating class */
 		tx_pwr_cat = REG_DEFAULT_CLIENT;
 		psd = mode->psd_values[NL80211_REG_REGULAR_CLIENT_LPI + ap_type];
+		if (err < 0) {
 #ifdef REG_DOM_SUPPORT_TX_POWER
-		tx_pwr = psd * 2;
+			tx_pwr = psd * 2;
 #else
-		tx_pwr = (hostapd_get_6g_tx_power(hapd, ap_type, tx_pwr_cat) * 2);
+			tx_pwr = (hostapd_get_6g_tx_power(hapd, ap_type, tx_pwr_cat) * 2);
 #endif /* REG_DOM_SUPPORT_TX_POWER */
+		} else {
+			tx_pwr = max_eirp_psd;
+		}
 		eid = hostapd_add_tpe_info(eid, tx_pwr_count, tx_pwr_intrpn, tx_pwr_cat, tx_pwr);
 
 		return eid;
